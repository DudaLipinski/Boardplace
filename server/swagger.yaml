openapi: 3.0.0
info:
  version: 1.0.0
  title: Duda Leo Proj 1
  description: Duda Leo Proj 1
paths:
  /user:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationPayload'
      summary: Create a user
      responses:
        '200':
          description: The created user's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Incorrect user format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists with given email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{userId}/matches:
    get:
      summary: Get all matches on which the given user participated
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: id of the user to have its matches returned
      responses:
        '200':
          description: The matches related to the given user
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Match'
                  properties:
                    participants:
                      type: array
                      items:
                        allOf:
                          - $ref: '#/components/schemas/HydratedMatchParticipant'
                        properties:
                          isWinner:
                            type: boolean
                  required:
                    - participants
        '404':
          description: No user found with the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{userId}/friend:
    post:
      summary: Get all friends related to given user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: id of the user to have its friends returned
      responses:
        '200':
          description: The friends related to the given user
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/UserInfo'
        '404':
          description: No user found with the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{userId}/friends:
    get:
      summary: Get all friends related to given user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: id of the user to have its friends returned
      responses:
        '200':
          description: The friends related to the given user
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/UserInfo'
        '404':
          description: No user found with the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth:
    post:
      summary: Log in with user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        '200':
          description: The logged in user's data along with the generated JWT token
          content:
            application/json:
              schema:
                properties:
                  user:
                    allOf:
                      - $ref: '#/components/schemas/UserInfo'
                  token:
                    type: string
                    description: JWT token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY2NjUyMTc4MCwiZXhwIjoxNjY2NTQzMzgwfQ.MDwMf43KJDUspoelvhst3FrzWdxaFzmowZ80alZERVQ
        '401':
          description: Provided credentials doesn't match any valid user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /friendship-request/send:
    post:
      summary: Send friendship request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendshipRequestBase'
      responses:
        '200':
          description: Friendship request sent
        '409':
          description: Friendship request already exists
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /friendship-request/{friendshipRequestId}/accept:
    post:
      summary: Accept friendship request
      parameters:
        - in: path
          name: friendshipRequestId
          schema:
            type: string
          required: true
          description: id of the friendship request to be accepted
      responses:
        '200':
          description: Friendship request accepted successfully
        '404':
          description: Friendship request doesn't exist
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /friendship-request/{friendshipRequestId}/decline:
    post:
      summary: Decline friendship request
      parameters:
        - in: path
          name: friendshipRequestId
          schema:
            type: string
          required: true
          description: id of the friendship request to be declined
      responses:
        '200':
          description: Friendship request declined successfully
        '404':
          description: Friendship request doesn't exist
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /match:
    post:
      summary: Create a match
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/MatchBase'
              properties:
                participants:
                  type: array
                  items:
                    $ref: '#/components/schemas/MatchParticipantBase'
      responses:
        '200':
          description: The match was successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Match'
        '400':
          description: Incorrect match format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /match/{matchId}:
    get:
      summary: Get a match by id, along with its paticipants
      parameters:
        - in: path
          name: matchId
          schema:
            type: integer
          required: true
          description: id of the match to get
      responses:
        '200':
          description: A match with the given id was succesfully retrieved
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Match'
                properties:
                  participants:
                    type: array
                    items:
                      $ref: '#/components/schemas/HydratedMatchParticipant'
        '404':
          description: No match was found with the provided id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected internal error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    # put:
    #   parameters:
    #     - in: path
    #       name: matchId
    #       schema:
    #         type: integer
    #       required: true
    #       description: id of the match to update
    #   summary: Update an existing match
    #   requestBody:
    #     content:
    #       application/json:
    #         schema:
    #           allOf:
    #             - $ref: '#/components/schemas/MatchBase'
    #           properties:
    #             participants:
    #               type: array
    #               items:
    #                 $ref: '#/components/schemas/MatchParticipantBase'
    #   responses:
    #     '200':
    #       description: The match was successfully created
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Match'
    #     '400':
    #       description: Incorrect match format
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    #     '500':
    #       description: Unexpected internal error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    UserBase:
      title: User base data
      description: Information that define an user
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        age:
          type: integer
          minimum: 1
          maximum: 120
      required:
        - firstName
        - lastName
        - age
        - email
      additionalProperties: false
    UserInfo:
      title: User
      description: User information
      type: object
      allOf:
        - $ref: '#/components/schemas/UserBase'
      properties:
        id:
          type: number
          minimum: 1
      required:
        - id
      additionalProperties: false
    UserCreationPayload:
      title: UserCreationPayload
      description: Data to create a user
      type: object
      allOf:
        - $ref: '#/components/schemas/UserBase'
      properties:
        password:
          type: string
      required:
        - password
      additionalProperties: false
    FriendshipRequestBase:
      title: Friendship request base data
      description: Information that define a friendship request
      type: object
      properties:
        requestingUserId:
          type: string
        requestedUserId:
          type: string
      required:
        - requestingUserId
        - requestedUserId
      additionalProperties: false
    FriendshipRequestInfo:
      title: Friendship request info
      description: Existent friendship request info
      type: object
      allOf:
        - $ref: '#/components/schemas/FriendshipRequestBase'
      properties:
        id:
          type: string
      required:
        - id
      additionalProperties: false
    Auth:
      title: Auth
      description: Data to authenticate a user
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
      additionalProperties: false
    MatchBase:
      title: Match base
      description: Match base data
      type: object
      properties:
        boardgameName:
          type: string
          description: (temporary) name of the boardgame
          example: Everdell
        date:
          type: string
          description: Date when the match took place, in UTC
          example: 2022-17-10 16:30
          nullable: true
        duration:
          type: integer
          description: The amount of seconds that the match took
          example: 3600
          nullable: true
        notes:
          type: string
          description: Further details about the match
          example: In this Everdell match, Kresh won by being the master of pigeons
          nullable: true
        # boardgameId:
        #   type: number
        #   description: id of boardgame registered at boardgamegeek api (https://boardgamegeek.com/boardgame/\<boardgameId\>)
        #   example: 174430
        # winnerUserId:
        #   type: integer
        #   description: The id of the user who won the match
        #   example: 13872
      required:
        - authorId
        - boardgameName
    Match:
      title: Match
      description: Full match data, with its registered id
      type: object
      allOf:
        - $ref: '#/components/schemas/MatchBase'
      properties:
        id:
          type: integer
          description: id of the registered match
          example: 14902
      required:
        - id
      additionalProperties: false
    MatchParticipantBase:
      title: Match participant base
      description: Relationship between a match and participant, along with his score and notes on that specific match
      type: object
      properties:
        # userId:
        #   type: integer
        #   description: id of the user who participated on the match
        #   example: 13803
        # unregisteredFriendId:
        #   type: integer
        #   description: id of the unregistered friend who participated in the match
        #   example: 13803
        fullName: # --- TEMPORARY
          type: string
          description: (temporary) full name of the participant
          example: Maria Lipânska
        score:
          type: number
          description: Score that the user achieved on the match
          example: 50
        # notes:
        #   type: string
        #   description: Further details related to the user's perfomance on the match
        #   example: Maria was able to increase her titanium production in the beginning, which snowballed her Terraforming mars company that was increase each of her titanium worth one more MC
      required:
        - fullName
        - score
    HydratedMatchParticipant:
      title: Match participant base
      description: Relationship between a match and participant, along with his score and notes on that specific match
      type: object
      allOf:
        - $ref: '#/components/schemas/MatchParticipantBase'
      properties:
        fullName:
          type: string
          description: Full name of the user/unregistered friend
          example: Guilherme Tatibana
      required:
        - fullName
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
security:
  - BearerAuth: []
